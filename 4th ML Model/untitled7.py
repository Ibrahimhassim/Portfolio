# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AqnIWZ_1Y_dbGs-CHu85qav4bdJiU7Cy
"""

# Importing the required libraries
# Lets bring in the required libraries and modules
import re
# Lets use a regex library
import nltk
# Import the nltk library
import pandas as pd
# I use pandas library
import numpy as np
# I am importing the numpy library
import matplotlib.pyplot as plt
# Lets use matplotlib.pyplot and seaborn for creating the graph on the screen.
import seaborn as sns

# Importing PySpark libraries for managing data
from pyspark.sql import SparkSession
# Import SparkSession, from pyspark.sql
from pyspark.sql.functions import udf
# Import udf from pyspark.sql.functions
# Importing IntegerType from pyspark.sql.types is necessary to work with integer data types in PySpark
from pyspark.sql.types import IntegerType, StringType, ArrayType

# Using TensorFlow and Keras to construct the LSTM model.
from tensorflow.keras.preprocessing.text import Tokenizer
# Import the Tokenizer module from the TensorFlow library for text preprocessing
from tensorflow.keras.preprocessing.sequence import pad_sequences
# Import 'pad_sequences' from the TensorFlow Keras preprocessing sequence module
from tensorflow.keras.models import Sequential
# Start by importing the module from the tensorflow.keras.models package
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
# Import components from TensorFlow library including layers like Embedding and LSTM along with Dense and Dropout for model construction
from tensorflow.keras.callbacks import EarlyStopping
# Import EarlyStopping from tensorflow.keras.callbacks
from tensorflow.keras.optimizers import Adam
# import Adam from the TensorFlow library for optimizing models
# Import the l2 regularization module from tensorflow.keras
from tensorflow.keras.regularizers import l2

# Using Sklearn for assessing models and measuring performance
from sklearn.model_selection import train_test_split
# Import the function from the sklearn library
# Import the confusion matrix and classification report functions from the sklearn metrics library used for analysis
from sklearn.metrics import confusion_matrix, classification_report

# Use NLTK for processing text
from nltk.corpus import stopwords
# Import the stopwords module from the NLTK library
# Lets import the word_tokenize function from the NLTK library
from nltk.tokenize import word_tokenize

# Importing keras tuner for hyperparameter tuning
import kerastuner as kt


# Initialize Spark session
spark = SparkSession.builder.master("local[*]").appName("SentimentAnalysis").getOrCreate()

# Download necessary NLTK data
nltk.download('stopwords')
nltk.download('punkt')


# Load the dataset into a PySpark DataFrame
df = pd.read_csv('/content/IMDB_Dataset.csv', on_bad_lines='skip', engine='python')
spark_df = spark.createDataFrame(df)


# Data Preprocessing
# Establish a list of words, in English that are often excluded in text analysis
# In Python the variable "stop_words" is defined as a set containing English stopwords
stop_words = set(stopwords.words('english'))

# Create a function for processing text
def preprocess_text(text):
    # This will change the text to lowercase
    text = text.lower()
    # This will remove any characters because they do not count as words
    text = re.sub(r'\W+', ' ', text)
    # This will break down the text into parts
    words = word_tokenize(text)
    # This will eliminate words that are considered stop words
    words = [word for word in words if word not in stop_words]
    # This will join all the words together using a space
    return ' '.join(words)

# Transform the function into a PySpark UDF
# Declare a user-defined function called preprocess_ud
preprocess_udf = udf(preprocess_text)

# Apply the UDF to the 'review' column in the Spark DataFrame
# The `spark_df` is updated by adding a column named 'processed_review' that contains the result of applying the `preprocess_udf`
# function to the 'review' column in the dataset
spark_df = spark_df.withColumn('processed_review', preprocess_udf(spark_df['review']))

# Change the 'sentimentâ€™ column into labels
def sentiment_to_label(sentiment):
    return 1 if sentiment == 'positive' else 0

# Use the label conversion by employing a UDF
label_udf = udf(sentiment_to_label, IntegerType())
# The 'label_udf' function is created using the 'sentiment_to_label' function, it Specifies the return type as an integer
spark_df = spark_df.withColumn('label', label_udf(spark_df['sentiment']))

# Convert the Spark DataFrame that has been processed into a pandas DataFrame
# what this does is converts the processed data frame by selecting the processed review and label columns into a Pandas data frame from Spark DataFrame
processed_df = spark_df.select('processed_review', 'label').toPandas()

# Tokenization and padding sequences

# Break down the text into tokens and ensure that all sequences are padded to maintain input lengths
# Using a Tokenizer with a limit of 5000 words
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(processed_df['processed_review'])
# tokenize the texts to convert them into sequences in the processed review dataframe
sequences = tokenizer.texts_to_sequences(processed_df['processed_review'])
# Pad the sequences to a length of 100
X = pad_sequences(sequences, maxlen=100)
y = np.array(processed_df['label'])

# Train-test split

# When dividing the data allocate 80% to training and 20% to testing sets
# split the data into training and testing sets using the train_test_split function with a test size of 20% and a random state of 42
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# EDA - Exploratory Data Analysis
# Check the distribution of labels
sns.countplot(x='label', data=processed_df)
plt.title('Distribution of Labels')
plt.show()

# Check the length of reviews
review_lengths = [len(seq) for seq in sequences]
sns.histplot(review_lengths, bins=50)
plt.title('Distribution of Review Lengths')
plt.xlabel('Number of Tokens')
plt.ylabel('Frequency')
plt.show()


# Model Building and Hyperparameter Tuning

# Construct the LSTM model and fine-tune the hyperparameters
# Creating a model with specified hyperparameters
def build_model(hp):
    model = Sequential()
    # Adding an embedding layer to the model with an input dimension of 5000 and an output dimension of 128 while setting the input length to 100
    model.add(Embedding(input_dim=5000, output_dim=128, input_length=100))
    # The initial LSTM layer includes regularization and dropout techniques
    model.add(LSTM(
        units=hp.Int('units_lstm1', min_value=64, max_value=256, step=64),
        return_sequences=True,
        kernel_regularizer=l2(hp.Float('l2_lstm1', min_value=1e-5, max_value=1e-2, sampling='LOG'))
    ))
    # model.add(Dropout with a dropout rate randomly selected between 10% and 50%)
    model.add(Dropout(hp.Float('dropout_lstm1', min_value=0.1, max_value=0.5, step=0.1)))

    # Adding a second LSTM layer with units ranging from 64 to 256 and L2 regularization
    model.add(LSTM(
        units=hp.Int('units_lstm2', min_value=64, max_value=256, step=64),
        kernel_regularizer=l2(hp.Float('l2_lstm2', min_value=1e-5, max_value=1e-2, sampling='LOG'))
    ))
    model.add(Dropout(hp.Float('dropout_lstm2', min_value=0.1, max_value=0.5, step=0.1)))

    # Adding the output layer with a sigmoid activation function
    model.add(Dense(1, activation='sigmoid'))
    # Compile the model using Adam optimizer and binary crossentropy loss
    model.compile(
        optimizer=Adam(learning_rate=hp.Float('learning_rate', min_value=1e-4, max_value=1e-2, sampling='LOG')),
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    return model

# Early stopping to prevent overfitting
# Set up the stopping function with a check, on the validation loss and a patience of 3
early_stopping = EarlyStopping(monitor='val_loss', patience=3)

# Configure the RandomSearch tuner for optimizing hyperparameters
# Set the directory as 'tuner_dir' and name the project 'sentiment_analysis'
# only 1 trial and 1 execution per trial for the sake fast execution
tuner = kt.RandomSearch(
    build_model,
    objective='val_accuracy',
    max_trials=1,
    executions_per_trial=1,
    directory='tuner_dir',
    project_name='sentiment_analysis'
)

# Tune the parameters on the training data
# Adjust the settings for data during the tuning process by using 20% of it as validation data
# (to speed up code execution add a batch size of 128 to decrease steps per epoch)
tuner.search(X_train, y_train, validation_split=0.2, epochs=5, callbacks=[early_stopping])

# Model Evaluation and Prediction

# Assess the models performance on the test dataset and display the accuracy
# The best hyperparameters are obtained by the tuner from a trial (Only doing 1 trial for the sake of speeding up the execution for the lecturer,
# in real world do more then 1 trial)
best_model = tuner.get_best_models(num_models=1)[0]

# Evaluate the model on test data
test_loss, test_accuracy = best_model.evaluate(X_test, y_test)
print(f"Test loss: {test_loss:.4f}")
print(f"Test accuracy: {test_accuracy:.4f}")

# Get the validation loss and accuracy during training
history = best_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, verbose=1)
val_loss = history.history['val_loss']
# The test accuracy is displayed as '{accuracy:.2f}'
val_accuracy = history.history['val_accuracy']

# Plot the validation and training loss and accuracy (The main reason we keep this is to assess if we have overfitting or underfitting)
epochs = range(1, len(val_loss) + 1)

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(epochs, history.history['loss'], 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(epochs, history.history['accuracy'], 'b', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'r', label='Validation accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# Make predictions on the test set
# The predicted values are calculated by the model for the test data
y_pred = (best_model.predict(X_test) > 0.5).astype(int)

# Display the classification report
# display the classification report by comparing the predicted values with the other values
print(classification_report(y_test, y_pred))

# Confusion Matrix

# Display the confusion matrix to assess the models performance
# The confusion matrix is calculated by comparing the test labels with the predicted labels
cm = confusion_matrix(y_test, y_pred)

# Create a representation of the confusion matrix using Seaborn
plt.figure(figsize=(4, 3))
# Create a plot with dimensions of 4, by 3 inches
# Display the confusion matrix using seaborns function with annotations and a blue color map
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
# 'Label the x axis as "Predicted Label"
plt.xlabel('Predicted Label')
# label the y axis accurately
plt.ylabel('True Label')
# The title of the plot is set as 'Confusion Matrix'
plt.title('Confusion Matrix')
plt.show()