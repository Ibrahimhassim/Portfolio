starting after the imported dataset

VISUALIZE DATA (x, y)-
plt.scatter(x, y, color='blue', marker='o', label='Data Points')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Scatterplot of Years of Experience vs Salary')
plt.legend()
plt.show()

----This function creates a scatter plot to visualize the relationship between years of experience (x) and salary (y).
plt.scatter(x, y, color='blue', marker='o', label='Data Points') plots the data points with 
years of experience on the x-axis and salary on the y-axis. It specifies the color, marker style, 
and label for the data points.
plt.xlabel('Years of Experience') and plt.ylabel('Salary') set the labels for the x-axis and y-axis, respectively.
plt.title('Scatterplot of Years of Experience vs Salary') sets the title of the plot.
plt.legend() displays the legend (in this case, the label for the data points).
plt.show() displays the plot.

split_data(df, test_size=0.2)-
x = df[['YearsExperience']]
y = df['Salary']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=42)
return x_train, x_test, y_train, y_test

----This function splits the dataset into training and testing sets.
x is assigned the 'YearsExperience' column of the DataFrame df, and y is assigned the 'Salary' column.
train_test_split(x, y, test_size=test_size, random_state=42) splits the data into training and testing sets. 
The test_size parameter specifies the proportion of the dataset to include in the test split 
(default is 0.2, meaning 20% of the data will be used for testing). random_state=42 ensures reproducibility of the split.
The function returns the training and testing features (x_train and x_test) 
and the corresponding training and testing targets (y_train and y_test).

train_linear_regression(x_train, y_train)-
model = LinearRegression()
model.fit(x_train, y_train)
return model

----This function trains a linear regression model using the training data.
model = LinearRegression() creates an instance of the LinearRegression class.
model.fit(x_train, y_train) fits the model to the training data (x_train and y_train),
 where x_train is the features and y_train is the target.
The trained model is returned.

predict_and_evaluate(model, x_test, y_test)-
y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_predict)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')
return y_pred

----This function makes predictions using the trained linear regression model on the test data (x_test).
model.predict(x_test) predicts the target variable (y_pred) using the test features (x_test).
mean_squared_error(y_test, y_pred) calculates the mean squared error between the true target values (y_test) 
and the predicted values (y_pred).
r2_score(y_test, y_pred) calculates the R-squared score, which measures the proportion of the variance
 in the dependent variable that is predictable from the independent variable.
The mean squared error and R-squared score are printed, and the predicted target values are returned.

visualize_regression_line(x, y, y_predict)-
plt.scatter(x, y, color='blue', marker='o', label='Data Points')
plt.plot(x, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Linear Regression: Years of Experience vs Salary')
plt.legend()
plt.show()

----This function visualizes the regression line along with the scatterplot of the data points.
plt.scatter(x, y, color='blue', marker='o', label='Data Points') plots the original data points as a scatter plot.
plt.plot(x, y_predict, color='red', linewidth=2, label='Regression Line') plots the regression line using 
the predicted values (y_predict).
plt.xlabel('Years of Experience') and plt.ylabel('Salary') set the labels for the x-axis and y-axis, respectively.
plt.title('Linear Regression: Years of Experience vs Salary') sets the title of the plot.
plt.legend() displays the legend (in this case, the label for the data points and the regression line).
plt.show() displays the plot.

Perform the data analysis-
visualize_data(df['YearsExperience'], df['Salary'])

----this line calls the visualize_data function to visualize the data points using a scatter plot.

x_train, x_test, y_train, y_test = split_data(df)

----This line calls the split_data function to split the dataset into training and testing sets.

model = train_linear_regression(x_train, y_train)

----This line calls the train_linear_regression function to train a linear regression model using the training data.

y_predict = predict_and_evaluate(model, x_test, y_test)

----This line calls the predict_and_evaluate function to make predictions using the trained model 
and evaluate its performance on the test data.

visualize_regression_line(df['YearsExperience'], df['Salary'], y_predict)

----This line calls the visualize_regression_line function to visualize the regression line along
 with the scatterplot of the data points and the predicted values.